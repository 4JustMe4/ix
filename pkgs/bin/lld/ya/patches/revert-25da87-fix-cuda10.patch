Revert: https://github.com/llvm/llvm-project/commit/25da870057f0edbe19221dd87a7f9a7c41f2cc7c
We need this hack to support gold -r linking with cuda10 libraries (cuda11 doesn't need this hack).

--- a/ELF/InputFiles.cpp
+++ b/ELF/InputFiles.cpp
@@ -627,7 +627,18 @@ StringRef ObjFile<ELFT>::getShtGroupSignature(ArrayRef<Elf_Shdr> sections,
   if (sec.sh_info >= symbols.size())
     fatal(toString(this) + ": invalid symbol index");
   const typename ELFT::Sym &sym = symbols[sec.sh_info];
-  return CHECK(sym.getName(this->stringTable), this);
+  StringRef signature = CHECK(sym.getName(this->stringTable), this);
+
+  // As a special case, if a symbol is a section symbol and has no name,
+  // we use a section name as a signature.
+  //
+  // Such SHT_GROUP sections are invalid from the perspective of the ELF
+  // standard, but GNU gold 1.14 (the newest version as of July 2017) or
+  // older produce such sections as outputs for the -r option, so we need
+  // a bug-compatibility.
+  if (signature.empty() && sym.getType() == STT_SECTION)
+    return getSectionName(sec);
+  return signature;
 }
 
 template <class ELFT>
@@ -692,6 +703,7 @@ void ObjFile<ELFT>::initializeSections(bool ignoreComdats,
                                        const llvm::object::ELFFile<ELFT> &obj) {
   ArrayRef<Elf_Shdr> objSections = getELFShdrs<ELFT>();
   StringRef shstrtab = CHECK(obj.getSectionStringTable(objSections), this);
+  this->sectionStringTable = shstrtab;
   uint64_t size = objSections.size();
   SmallVector<ArrayRef<Elf_Word>, 0> selectedGroups;
   for (size_t i = 0; i != size; ++i) {
@@ -1007,6 +1019,11 @@ InputSectionBase *ObjFile<ELFT>::createInputSection(uint32_t idx,
   return makeThreadLocal<InputSection>(*this, sec, name);
 }
 
+template <class ELFT>
+StringRef ObjFile<ELFT>::getSectionName(const Elf_Shdr &sec) {
+  return CHECK(getObj().getSectionName(sec, sectionStringTable), this);
+}
+
 // Initialize this->Symbols. this->Symbols is a parallel array as
 // its corresponding ELF symbol table.
 template <class ELFT>
--- a/ELF/InputFiles.h
+++ b/ELF/InputFiles.h
@@ -292,6 +292,7 @@ private:
                                    uint32_t info);
   InputSectionBase *createInputSection(uint32_t idx, const Elf_Shdr &sec,
                                        StringRef name);
+  StringRef getSectionName(const Elf_Shdr &sec);
 
   bool shouldMerge(const Elf_Shdr &sec, StringRef name);
 
@@ -309,6 +310,9 @@ private:
   // If the section does not exist (which is common), the array is empty.
   ArrayRef<Elf_Word> shndxTable;
 
+  // .shstrtab contents.
+  StringRef sectionStringTable;
+
   // Debugging information to retrieve source file and line for error
   // reporting. Linker may find reasonable number of errors in a
   // single object file, so we cache debugging information in order to
