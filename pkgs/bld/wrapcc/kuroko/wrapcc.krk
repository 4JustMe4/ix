#!/usr/bin/env kuroko

import os
import fileio
import kuroko as sys

def it_args():
    for x in sys.argv[1:]:
        if x:
            if x[0] == '@' and '.dylib' not in x:
                yield from fileio.open(x[1:], 'r').read().split()
            elif x.startswith('-o/'):
                yield '-o'
                yield x[2:]
            else:
                yield x

def flt_args(argv):
    for x in argv:
        if '-D-pthread' in x:
            continue

        if x.startswith('-L/usr/'):
            continue

        if x.startswith('-L/lib/'):
            continue

        if x == '-L/lib':
            continue

        if x.startswith('-I/usr/'):
            continue

        if x.startswith('/usr/lib') and '.so' in x:
            continue

        if x.startswith('/usr/lib') and '.dylib' in x:
            continue

        if x.startswith('/lib') and '.so' in x:
            continue

        if x.startswith('/lib') and '.dylib' in x:
            continue

        yield x

def replace(lst, x, y):
    for el in lst:
        if el == x:
            yield y
        else:
            yield el

def calc_args(argv):
    let args = list(replace(flt_args(argv), '-Ur', '-r'))

    if '-r' in args:
        args = ['ld.lld'] + args[1:]

    return args

def flt_objs(argv):
    for x in argv:
        if x.endswith('.o'):
            yield x
        elif '/store/' in x:
            pass
        elif x.endswith('.a'):
            yield x

def have_objs(args):
    for x in args:
        if x.endswith('.o'):
            return True

def iter_dirs(path):
    let cur = ''

    for ch in path:
        if ch == '/':
            if cur:
                yield cur
                cur = ''
            else:
                cur += ch

def make_dirs_for(path):
    for d in iter_dirs(path):
        try:
            os.mkdir(d)
        except OSError as e:
            if 'File exists' not in str(e):
                raise e

def link1(x, objs):
    if '/' in x:
        make_dirs_for(x)

    if objs:
        retry(['llvm-ar', 'qL', x] + objs)
    else:
        with fileio.open(x, 'w') as f:
            pass

def link(objs, args):
    for x in args:
        if '-Wl' in x:
            continue

        if '.so' in x:
            return link1(x, objs)

        if '.dylib' in x:
            return link1(x, objs)

def retry(args):
    os.execvp(args[0], args)

def calc_program(args):
    if '-P' in args or '-E' in args:
        return 'clang-cpp'

    return args[0]

def main():
    let raw_args = list(it_args())

    if '--print-search-dirs' in raw_args:
        return

    if '-print-search-dirs' in raw_args:
        return

    if '-print-multi-os-directory' in raw_args:
        return

    let sa = str(raw_args)
    let args = calc_args(raw_args)

    if '-c' in args:
        pass
    elif '-shared' in sa or '--soname' in sa:
        return link(list(flt_objs(args)), args)
    elif have_objs(args):
        if '-rdynamic' in sa or '-export-dynamic' in sa:
            return retry(['dynlink'] + args)

    retry([calc_program(args)] + args[1:])

main()
